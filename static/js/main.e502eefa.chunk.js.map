{"version":3,"sources":["util/github-util.js","App.js","serviceWorker.js","index.js"],"names":["fetchAllLabels","_x","_fetchAllLabels","apply","this","arguments","_callee","options","domain","owner","name","apiKey","after","data","_data$repository$labe","nodes","pageInfo","regenerator_default","a","wrap","_context","prev","next","fetch","concat","method","headers","Authorization","window","btoa","body","JSON","stringify","query","variables","then","response","ok","json","Promise","reject","errors","sent","repository","labels","hasPreviousPage","abrupt","t0","Object","objectSpread","endCursor","t1","call","stop","fetchAllIssues","_x2","_fetchAllIssues","_callee2","numIssuesAndPRs","numPagesNeeded","pageNumbers","results","issues","_context2","_ref","totalCount","pullRequests","Math","ceil","toConsumableArray","Array","keys","map","index","all","pageNumber","filter","pull_request","reduce","total","current","issue","title","number","createdAt","created_at","closedAt","closed_at","label","originalLine","Chart","controllers","line","extend","draw","ease","prototype","chart","tooltip","_active","length","activePoint","ctx","x","tooltipPosition","topY","scales","top","bottomY","bottom","save","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","restore","App","state","repoURL","localStorage","getItem","numOpenIssues","chartLabels","selectedLabels","isCheckboxChecked","isLoading","errorMessage","handleRepoURLChange","event","_this","setState","target","value","handleApiKeyChange","handleLabelChange","includes","handleCheckboxChange","checked","getIssues","_this$state$repoURL$m","_this$state$repoURL$m2","githubOptions","_ref2","_ref3","labelsObj","timesObj","match","slicedToArray","status","statusText","message","forEach","_ref4","props","objectWithoutProperties","round","time","Date","toDateString","toISOString","times","sort","b","__total","color","chartData","localeCompare","setItem","getChartData","datasets","join","fill","borderColor","lineTension","pointRadius","pointHoverRadius","every","selectedLabel","some","issueLabel","labelToGenerate","renderChartArea","react_default","createElement","className","react","es","legend","display","tooltips","intersect","mode","xAxes","type","tooltipFormat","onChange","chartLabel","key","onClick","rel","href","placeholder","Component","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e502eefa.chunk.js","sourcesContent":["/**\n * Recursively fetches a repository's labels\n * @param {object} options Request options\n */\nexport async function fetchAllLabels(options) {\n  const { domain, owner, name, apiKey, after } = options;\n\n  const data = await fetch(`https://api.${domain}/graphql`, {\n    method: 'post',\n    headers: { 'Authorization': `Basic ${window.btoa(apiKey)}` },\n    body: JSON.stringify({\n      query: `query($owner: String!, $name: String!, $after: String) {\n        repository(owner: $owner, name: $name, ) {\n          labels(first: 100, after: $after) {\n            pageInfo {\n              hasNextPage\n              startCursor\n            }\n            nodes {\n              name\n              color\n              issues(states: OPEN) {\n                totalCount\n              }\n            }\n          }\n        }\n      }`,\n      variables: { owner, name, after },\n    }),\n  })\n    .then(response => !response.ok ? Promise.reject(response) : response.json())\n    .then(response => response.errors ? Promise.reject(response.errors) : response.data) // queries can fail\n\n  const { nodes, pageInfo } = data.repository.labels;\n\n  if (!pageInfo.hasPreviousPage) {\n    return nodes;\n  }\n\n  return nodes.concat(await fetchAllLabels({ ...options, after: pageInfo.endCursor }));\n}\n\n/**\n * Fetches all of a repo's issues\n * @param {object} options Request options\n */\nexport async function fetchAllIssues(options) {\n  const { domain, owner, name, apiKey } = options;\n\n  // Get the total number of issues and PRs\n  // Note: we need to include PRs since GitHub's issues API returns BOTH issues and PRs\n  const numIssuesAndPRs = await fetch(`https://api.${domain}/graphql`, {\n    method: 'post',\n    headers: { 'Authorization': `Basic ${window.btoa(apiKey)}` },\n    body: JSON.stringify({\n      query: `query($owner: String!, $name: String!) {\n        repository(owner: $owner, name: $name, ) {\n          issues {\n            totalCount\n          }\n          pullRequests {\n            totalCount\n          }\n        }\n      }`,\n      variables: { owner, name },\n    }),\n  })\n    .then(response => !response.ok ? Promise.reject(response) : response.json())\n    .then(response => response.errors ? Promise.reject(response.errors) : response.data) // queries can fail\n    .then(({ repository }) => repository.issues.totalCount + repository.pullRequests.totalCount);\n\n  // Send requests in parallel to retrieve all the issues\n  const numPagesNeeded = Math.ceil(numIssuesAndPRs / 100);\n  const pageNumbers = [...Array(numPagesNeeded).keys()].map(index => index + 1); // [1...numPagesNeeded]\n  const results = await Promise.all(pageNumbers.map(pageNumber => (\n    fetch(`https://api.${domain}/repos/${owner}/${name}/issues?state=all&direction=asc&per_page=100&page=${pageNumber}`, {\n      headers: { 'Authorization': `Basic ${window.btoa(apiKey)}` },\n    })\n      .then(response => !response.ok ? Promise.reject(response) : response.json())\n      .then(response => response.filter(data => !data.pull_request)) // filter out pull requests\n  )));\n\n  // Flatten results into a single array\n  const issues = results.reduce((total, current) => total.concat(current));\n\n  // Return only relevant properties\n  return issues.map(issue => ({\n    title: issue.title,\n    number: issue.number,\n    createdAt: issue.created_at,\n    closedAt: issue.closed_at,\n    labels: issue.labels.map(label => label.name),\n  }));\n}\n","import React, { Component, Fragment } from 'react';\nimport { Line, Chart } from 'react-chartjs-2';\nimport { fetchAllLabels, fetchAllIssues } from './util/github-util';\nimport './App.css';\n\n// The vertical line that follows the mouse (https://stackoverflow.com/a/45172506/8917446)\nconst originalLine = Chart.controllers.line;\nChart.controllers.line = Chart.controllers.line.extend({\n  draw: function (ease) {\n    originalLine.prototype.draw.call(this, ease);\n\n    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {\n      var activePoint = this.chart.tooltip._active[0],\n        ctx = this.chart.ctx,\n        x = activePoint.tooltipPosition().x,\n        topY = this.chart.scales['y-axis-0'].top,\n        bottomY = this.chart.scales['y-axis-0'].bottom;\n\n      // draw line\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(x, topY);\n      ctx.lineTo(x, bottomY);\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = '#07C';\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n});\n\nclass App extends Component {\n  state = {\n    repoURL: window.localStorage.getItem('repo_url') || '',\n    apiKey: window.localStorage.getItem('api_key') || '',\n    numOpenIssues: null,\n    chartLabels: null,\n    selectedLabels: [],\n    isCheckboxChecked: false,\n    isLoading: false,\n    errorMessage: null,\n  }\n\n  handleRepoURLChange = event => {\n    this.setState({ repoURL: event.target.value });\n  }\n\n  handleApiKeyChange = event => {\n    this.setState({ apiKey: event.target.value });\n  }\n\n  handleLabelChange = event => {\n    const selectedLabels = this.state.selectedLabels.includes(event.target.value)\n      ? this.state.selectedLabels.filter(label => label !== event.target.value)\n      : this.state.selectedLabels.concat(event.target.value);\n    this.setState({ selectedLabels });\n  }\n\n  handleCheckboxChange = event => {\n    this.setState({ isCheckboxChecked: event.target.checked });\n  }\n\n  getIssues = async () => {\n    this.setState({ isLoading: true });\n\n    const [repoURL, domain, owner, name] = this.state.repoURL.match(/(github[^/]*)\\/([^/]*)\\/([^/&?]*)/);\n    const githubOptions = { domain, owner, name, apiKey: this.state.apiKey };\n    try {\n      [this.labels, this.issues] = await Promise.all([fetchAllLabels(githubOptions), fetchAllIssues(githubOptions)]);\n    } catch (e) {\n      let errorMessage = 'Failed to fetch issues';\n      if (e.status && e.statusText) {\n        errorMessage += `: ${e.status} ${e.statusText}. Double check your API key.`;\n      } else if (e[0].message) {\n        errorMessage += `: ${e[0].message}`;\n      } else {\n        errorMessage += '. Double check the repo URL and API key.'\n      }\n      return this.setState({ errorMessage });\n    }\n\n    // Convert fetched labels into an object for easier access\n    const labelsObj = {};\n    this.labels.forEach(({ name, ...props }) => { labelsObj[name] = props });\n    this.labels = labelsObj;\n\n    // Get a list of times and count the number of open issues\n    // TODO: think about splitting the logic up? Will it hurt performance?\n    const timesObj = {};\n    let numOpenIssues = 0;\n    this.issues.forEach(issue => {\n      const round = time => new Date(new Date(time).toDateString()).toISOString();\n      timesObj[round(issue.createdAt)] = null;\n      if (issue.closedAt) {\n        timesObj[round(issue.closedAt)] = null;\n      } else {\n        numOpenIssues += 1;\n      }\n    });\n    this.times = Object.keys(timesObj).concat(new Date().toISOString()); // include current time\n    this.times.sort((a, b) => new Date(a) - new Date(b)); // make sure it's in chronological order\n\n    // Mock a \"__total\" label for displaying all the issues\n    this.labels.__total = {\n      color: '0366d6',\n      issues: { totalCount: numOpenIssues },\n    };\n\n    // Finish up\n    this.chartData = {};\n    this.setState({\n      isLoading: false,\n      numOpenIssues,\n      repoURL: `https://${repoURL}`,\n      chartLabels: Object.keys(this.labels).sort((a, b) => a.localeCompare(b)),\n      selectedLabels: ['__total'],\n    }, () => {\n      window.localStorage.setItem('repo_url', this.state.repoURL);\n      window.localStorage.setItem('api_key', this.state.apiKey);\n    });\n  }\n\n  getChartData = () => {\n    // If using AND filtering, count all the issues with the selected labels\n    if (this.state.isCheckboxChecked) {\n      return {\n        labels: this.times,\n        datasets: [{\n          label: this.state.selectedLabels.join(', '),\n          fill: false,\n          borderColor: '#0366d6',\n          lineTension: 0,\n          pointRadius: 0,\n          pointHoverRadius: 0,\n          data: !this.state.selectedLabels.length\n            ? []\n            : this.times.map(time => (\n              this.issues.filter(issue => {\n                if (new Date(time) < new Date(issue.createdAt)) {\n                  return false;\n                }\n                if (issue.closedAt && new Date(time) >= new Date(issue.closedAt)) {\n                  return false;\n                }\n                return this.state.selectedLabels.every(selectedLabel => (\n                  issue.labels.some(issueLabel => issueLabel === selectedLabel)\n                ));\n              }).length\n            )),\n        }],\n      };\n    }\n\n    // For each selected label, generate the chart data if didn't already\n    this.state.selectedLabels.filter(label => !this.chartData[label])\n      .forEach(labelToGenerate => {\n        this.chartData[labelToGenerate] = this.times.map(time => (\n          this.issues.filter(issue => {\n            if (new Date(time) < new Date(issue.createdAt)) {\n              return false;\n            }\n            if (issue.closedAt && new Date(time) >= new Date(issue.closedAt)) {\n              return false;\n            }\n            if (labelToGenerate === '__total') {\n              return true;\n            }\n            return issue.labels.some(issueLabel => issueLabel === labelToGenerate);\n          }).length\n        ));\n      });\n\n    return {\n      labels: this.times,\n      datasets: this.state.selectedLabels.map(selectedLabel => ({\n        label: selectedLabel,\n        data: [...this.chartData[selectedLabel]], // don't pass directly or original values will change\n        borderColor: `#${this.labels[selectedLabel].color}`,\n        fill: false,\n        lineTension: 0,\n        pointRadius: 0,\n        pointHoverRadius: 0,\n      })),\n    };\n  }\n\n  renderChartArea = () => {\n    if (!this.state.isLoading && !this.state.chartLabels) {\n      return (\n        <div className=\"status\">\n          <span>Enter your </span>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/\">GitHub token</a>\n          <span> to get started.</span>\n        </div>\n      );\n    }\n    if (this.state.isLoading || !this.state.chartLabels) {\n      return <div className=\"status\">Loading...</div>;\n    }\n\n    return (\n      <Fragment>\n        <div className=\"status\">\n          There are {this.state.numOpenIssues} open issues\n        </div>\n        <div className=\"container\">\n          <div className=\"chart\">\n            <Line\n              data={this.getChartData()}\n              options={{\n                legend: {\n                  display: false,\n                },\n                tooltips: {\n                  intersect: false,\n                  mode: 'index',\n                },\n                scales: {\n                  xAxes: [{\n                    type: 'time',\n                    time: {\n                      tooltipFormat: 'll', // https://momentjs.com/\n                    },\n                  }],\n                }\n              }}\n            />\n          </div>\n          <div className=\"labels\">\n            <h2>Labels</h2>\n            <input\n              type=\"checkbox\"\n              checked={this.state.isCheckboxChecked}\n              onChange={this.handleCheckboxChange}\n            />Use AND Filter\n            {this.state.chartLabels.map(chartLabel => (\n              <option\n                className={this.state.selectedLabels.includes(chartLabel) ? 'selected' : null}\n                key={chartLabel}\n                value={chartLabel}\n                onClick={this.handleLabelChange}\n              >\n                {chartLabel} ({this.labels[chartLabel].issues.totalCount})\n              </option>\n            ))}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"repo-info\">\n          <input\n            value={this.state.repoURL}\n            onChange={this.handleRepoURLChange}\n            placeholder=\"Repo URL\"\n          />\n          <input\n            value={this.state.apiKey}\n            onChange={this.handleApiKeyChange}\n            placeholder=\"API Key\"\n          />\n          <button onClick={this.getIssues}>Submit</button>\n        </div>\n        {this.state.errorMessage\n          ? <div className=\"error\">{this.state.errorMessage}</div>\n          : this.renderChartArea()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}